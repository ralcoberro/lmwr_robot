<?xml version="1.0"?>
<robot name="tango_xacro" xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:property name="body_diameter" value="0.3" />
  <xacro:property name="body_height" value="0.08" />
  <xacro:property name="traction_wheel_radius" value="0.03" />
  <xacro:property name="traction_wheel_width" value="0.01" />
  <xacro:property name="aux_wheel_radius" value="0.03" />
  <xacro:property name="camera_link" value="0.05" />

  <xacro:include filename="materials.xacro" />
  <xacro:include filename="inertials.xacro" />

  <!-- material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>

  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>

  <material name="green">
    <color rgba="0 1 0 1"/>
  </material>

  <material name="grey">
    <color rgba=".2 .2 .2 1"/>
  </material>

  <material name="white">
    <color rgba="1 1 1 1"/>
  </material -->

  <xacro:macro name="inertial_cube" params="mass">
    <inertial>
      <mass value="${mass}" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
    </inertial>
  </xacro:macro>

  <link name="main_body">
    <visual>
      <geometry>
        <cylinder radius="${body_diameter/2}" length="${body_height}"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="${body_diameter/2}" length="${body_height}"/>
      </geometry>
    </collision>
  </link>

  <!-- Dummy link just for inertial purposes -->
  <link name="dummy_link">
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <origin xyz="0 0 0"/>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <origin xyz="0 0 0"/>
    </collision>
    <!-- inertial>
      <mass value="2" />
      <inertia ixx="0.002" ixy="0.0" ixz="0.0" iyy="0.002" iyz="0.0" izz="0.01" />
    </inertial -->
    <xacro:inertial_cylinder mass="2" radius="${body_diameter/2}" height="${body_height}" />
  </link>

  <joint name="dummy_base_joint" type="fixed">
    <axis rpy="0 0 0" xyz="0 0 1"/>
    <parent link="main_body"/>
    <child link="dummy_link"/>
    <origin xyz="0 0 -0.02" />
  </joint>

  <xacro:macro name="front_sensor_link" params="name side y_pos">
    <link name="${name}_front_sensor">
      <visual>
        <geometry>
          <box size="0.02 0.02 0.02"/>
        </geometry>
        <origin xyz="-0.02 0 0" rpy="0 0 0"/>
        <material name="white"/>
      </visual>
      <collision>
        <geometry>
          <box size="0.02 0.02 0.02"/>
        </geometry>
        <origin xyz="-0.02 0 0" rpy="0 0 0"/>
      </collision>
    </link>

    <joint name="${side}_front_base_joint" type="fixed">
      <axis rpy="0 0 0" xyz="0 0 0"/>
      <parent link="main_body"/>
      <child link="${name}_front_sensor"/>
      <origin xyz="${body_diameter/2} ${side*y_pos} 0" rpy="0 -0.15 0" />
    </joint>

    <gazebo reference="${name}_front_sensor">        
     <sensor type="ray" name="TeraRanger">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>50</update_rate>
      <ray>
         <scan>
            <horizontal>
               <samples>10</samples>
               <resolution>1</resolution> 
               <min_angle>-0.14835</min_angle>
               <max_angle>0.14835</max_angle>
            </horizontal>
            <vertical>
               <samples>10</samples>
               <resolution>1</resolution> 
               <min_angle>-0.14835</min_angle>
               <max_angle>0.14835</max_angle> 
            </vertical>
         </scan>
         <range>
            <min>0.05</min>
            <max>2</max>
            <resolution>0.01</resolution>
         </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="gazebo_ros_range">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>50</updateRate>
        <topicName>sensor/${name}_ultrasonic_front</topicName>
        <frameName>${name}_front_sensor</frameName>
        <radiation>ULTRASOUND</radiation>
        <fov>0.2967</fov>
      </plugin>
     </sensor>  
   </gazebo>

  </xacro:macro>

  <!-- Camera -->
  <link name="camera_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 ${-camera_link}" rpy="0 0 0"/>
      <geometry>
    <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
      <material name="red"/>
    </visual>
    <inertial>
      <mass value="1e-5"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <joint name="camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="${body_diameter/2} 0 ${body_height/2}" rpy="0 -0.15 0"/>
    <parent link="main_body"/>
    <child link="camera_link"/>
  </joint>

  <!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>sensor/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <!-- IMU -->
  <gazebo>
    <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
      <alwaysOn>true</alwaysOn>
      <bodyName>main_body</bodyName>
      <topicName>imu</topicName>
      <serviceName>imu_service</serviceName>
      <gaussianNoise>0.0</gaussianNoise>
      <updateRate>20.0</updateRate>
    </plugin>
  </gazebo>

  <!-- GPS -->
  <gazebo>
    <plugin name="gps_controller" filename="libhector_gazebo_ros_gps.so">
      <alwayson>true</alwayson>
      <updaterate>1.0</updaterate>
      <bodyname>main_body</bodyname>
      <topicname>fix</topicname>
      <velocitytopicname>/fix_velocity</velocitytopicname>
      <drift>5.0 5.0 5.0</drift>
      <gaussiannoise>0.1 0.1 0.1</gaussiannoise>
      <velocitydrift>0 0 0</velocitydrift>
      <velocitygaussiannoise>0.1 0.1 0.1</velocitygaussiannoise>
    </plugin>
  </gazebo>

  <xacro:macro name="aux_wheel" params="side reflect">

    <link name="${side}_aux_wheel">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <sphere radius="${aux_wheel_radius}"/>
        </geometry>
        <material name="black"/>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <sphere radius="${aux_wheel_radius}"/>
        </geometry>
      </collision>
      <!-- inertial>
        <mass value="0.05" />
        <inertia ixx="0.0002" ixy="0.0" ixz="0.0" iyy="0.0002" iyz="0.0" izz="0.0002" />
      </inertial -->
      <xacro:inertial_sphere mass="0.05" radius="${aux_wheel_radius}" />
    </link>
    <joint name="${side}_aux_wheel_joint" type="continuous">
      <parent link="main_body"/>
      <child link="${side}_aux_wheel"/>
      <axis xyz="0 1 0" rpy="0 0 0" />
      <!-- origin xyz="${-body_diameter/2+0.05} ${reflect*0.01} -0.05" rpy="0 0 0"/ -->
      <origin xyz="-0.12 ${reflect*0.01} -0.05" rpy="0 0 0"/>
    </joint>

    <!-- This block provides the simulator (Gazebo) with information on a few additional
    physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
    <gazebo reference="${side}_aux_wheel">
      <mu1 value="1.0"/>
      <mu2 value="1.0"/>
      <kp value="1000000.0" />
      <kd value="100.0" />
      <material>Gazebo/Grey</material>
    </gazebo>

  </xacro:macro>

  <xacro:macro name="traction_wheel" params="side reflect">

    <link name="${side}_traction_wheel">
      <visual>
        <origin xyz="0 ${reflect*traction_wheel_width/2} 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${traction_wheel_radius}" length="${traction_wheel_width}"/>
        </geometry>
        <material name="black"/>
      </visual>
      <collision>
        <origin xyz="0 ${reflect*traction_wheel_width/2} 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${traction_wheel_radius}" length="${traction_wheel_width}"/>
        </geometry>
      </collision>
     <!-- inertial>
      <mass value="0.1" />
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00009" iyz="0.0" izz="0.00001" />
    </inertial -->
    <xacro:inertial_cylinder_y_axis mass="0.1" radius="${traction_wheel_radius}" height="${traction_wheel_width}" />
   </link>
    <joint name="${side}_traction_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="main_body"/>
      <child link="${side}_traction_wheel"/>
      <origin xyz="${body_diameter/3} ${reflect*(body_diameter/3)} ${-body_height/2}" rpy="0 0 0"/>
    </joint>

    <!-- This block provides the simulator (Gazebo) with information on a few additional
    physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
    <gazebo reference="${side}_traction_wheel">
      <mu1 value="300.0"/>
      <mu2 value="100.0"/>
      <kp value="10000000.0" />
      <kd value="100.0" />
      <material>Gazebo/Black</material>
    </gazebo>

    <!-- This block connects the wheel joint to an actuator (motor), which informs both
    simulation and visualization of the robot -->
    <transmission name="${side}_traction_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="${side}_traction_wheel_motor">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
      <joint name="${side}_traction_wheel_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
    </transmission>

  </xacro:macro>

  <xacro:traction_wheel side="left" reflect="-1"/>
  <xacro:traction_wheel side="right" reflect="1"/>

  <xacro:aux_wheel side="center" reflect="0"/>

  <xacro:front_sensor_link name="ultra_1" side="-1" y_pos="0.1" />
  <xacro:front_sensor_link name="ultra_2" side="1" y_pos="0.1" />

  <!-- Gazebo plugin for ROS Control -->
  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>

</robot>
